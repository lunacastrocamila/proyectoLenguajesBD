CREATE OR REPLACE FUNCTION EliminarDoctor(
    Id_Doctor IN VARCHAR2
) RETURN VARCHAR2
AS
BEGIN
    DELETE FROM Doctores WHERE Id_Doctores = Id_Doctor;
    RETURN 'Doctor eliminado exitosamente';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error al eliminar el doctor';
END;
/

-- Función para cancelar una cita en la base de datos
CREATE OR REPLACE FUNCTION CancelarCita(
    Id_Cita IN VARCHAR2
) RETURN VARCHAR2
AS
BEGIN
    UPDATE Citas SET Estado = 'Cancelada' WHERE Id_Citas = Id_Cita;
    RETURN 'Cita cancelada exitosamente';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error al cancelar la cita';
END;
/

-- Función para buscar un paciente por su nombre
CREATE OR REPLACE FUNCTION BuscarPacientePorNombre(
    Nombre IN VARCHAR2
) RETURN SYS_REFCURSOR
AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
        SELECT * FROM Pacientes WHERE NombrePaciente = Nombre;
    RETURN v_cursor;
END;
/

-- Función para listar todas las citas de un paciente
CREATE OR REPLACE FUNCTION ListarCitasPorPaciente(
    Id_Paciente IN VARCHAR2
) RETURN SYS_REFCURSOR
AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
        SELECT * FROM Citas WHERE Id_Paciente = Id_Paciente;
    RETURN v_cursor;
END;
/

-- Función para registrar doctor

CREATE OR REPLACE PROCEDURE RegistrarDoctor(
    Id_Doctor IN VARCHAR2,
    NombreDoctor IN VARCHAR2,
    Apellido1Doctor IN VARCHAR2,
    Apellido2Doctor IN VARCHAR2,
    Id_Especialidad IN VARCHAR2
)
AS
BEGIN
    INSERT INTO Doctores (Id_Doctores, NombreDoctor, Apellido1Doctor, Apellido2Doctor, Id_Especialidad)
    VALUES (Id_Doctor, NombreDoctor, Apellido1Doctor, Apellido2Doctor, Id_Especialidad);
END RegistrarDoctor;
/


-- Función para actualizar información del paciente

CREATE OR REPLACE PROCEDURE ActualizarInformacionPaciente(
    Id_Paciente IN VARCHAR2,
    NuevoNombre IN VARCHAR2,
    NuevoApellido1 IN VARCHAR2,
    NuevoApellido2 IN VARCHAR2
)
AS
BEGIN
    UPDATE Pacientes
    SET NombrePaciente = NuevoNombre,
        Apellido1Paciente = NuevoApellido1,
        Apellido2Paciente = NuevoApellido2
    WHERE Id_Paciente = Id_Paciente;
END ActualizarInformacionPaciente;
/


-- Función para registrar especialidad
CREATE OR REPLACE PROCEDURE RegistrarEspecialidad(
    Id_Especialidad IN VARCHAR2,
    DescripcionEspecialidad IN VARCHAR2
)
AS
BEGIN
    INSERT INTO Especialidades (Id_Especialidad, DescripcionEspecialidad)
    VALUES (Id_Especialidad, DescripcionEspecialidad);
END RegistrarEspecialidad;
/

--Procedimientos Almacenados

--Procedimiento para obtener los datos clínicos de un paciente:
CREATE OR REPLACE PROCEDURE GetDatosClinicos(
    PacienteId IN VARCHAR2,
    DatosClinicos OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN DatosClinicos FOR
    SELECT * FROM DatosClinicos WHERE Id_Paciente = PacienteId;
END GetDatosClinicos;
/

--Procedimiento para obtener citas por especialidad:
CREATE OR REPLACE PROCEDURE GetCitasPorEspecialidad(
    EspecialidadId IN VARCHAR2,
    Citas OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN Citas FOR
    SELECT * FROM Citas WHERE Id_Especialidad = EspecialidadId;
END GetCitasPorEspecialidad;
/

--Procedimiento para registrar un paciente
CREATE OR REPLACE PROCEDURE RegistrarPaciente(
    Id_Paciente IN VARCHAR2,
    NombrePaciente IN VARCHAR2,
    Apellido1Paciente IN VARCHAR2,
    Apellido2Paciente IN VARCHAR2
)
AS
BEGIN
    INSERT INTO Pacientes (Id_Paciente, NombrePaciente, Apellido1Paciente, Apellido2Paciente)
    VALUES (Id_Paciente, NombrePaciente, Apellido1Paciente, Apellido2Paciente);
END RegistrarPaciente;
/ 

--Procedimiento para obtener pacientes con datos clínicos
CREATE OR REPLACE PROCEDURE ObtenerPacientesConClinicos AS
  CURSOR c_pacientes IS
    SELECT p.Id_Paciente, p.NombrePaciente, p.Apellido1Paciente, p.Apellido2Paciente,
           dc.DescripcionDato
    FROM Pacientes p
    LEFT JOIN DatosClinicos dc ON p.Id_Paciente = dc.Id_Paciente;

  r_paciente c_pacientes%ROWTYPE;
BEGIN
  FOR r_paciente IN c_pacientes LOOP
    DBMS_OUTPUT.PUT_LINE('ID: ' || r_paciente.Id_Paciente ||
                         ' Nombre: ' || r_paciente.NombrePaciente ||
                         ' Apellido: ' || r_paciente.Apellido1Paciente ||
                         ' Dato Clínico: ' || r_paciente.DescripcionDato);
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: no se obtuvieron DatosClinicos ' || SQLERRM);
END ObtenerPacientesConClinicos;
/


--Procedimiento para obtener citas pendientes
CREATE OR REPLACE PROCEDURE ObtenerCitasPendientes AS
  CURSOR c_citas IS
    SELECT c.Id_Citas, c.Fecha, c.Hora, c.Estado, p.NombrePaciente, d.NombreDoctor
    FROM Citas c
    JOIN Pacientes p ON c.Id_Paciente = p.Id_Paciente
    JOIN Doctores d ON c.Id_Doctores = d.Id_Doctores
    WHERE c.Estado = 'Pendiente';

  r_cita c_citas%ROWTYPE;
BEGIN
  FOR r_cita IN c_citas LOOP
    DBMS_OUTPUT.PUT_LINE('Cita ID: ' || r_cita.Id_Citas ||
                         ' Fecha: ' || r_cita.Fecha ||
                         ' Hora: ' || r_cita.Hora ||
                         ' Estado: ' || r_cita.Estado ||
                         ' Paciente: ' || r_cita.NombrePaciente ||
                         ' Doctor: ' || r_cita.NombreDoctor);
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: no se obtuvieron Citas pendientes ' || SQLERRM);
END ObtenerCitasPendientes;
/

-- Cursores

--Cursor para obtener la lista de pacientes con sus datos clínicos:

CREATE OR REPLACE PROCEDURE ObtenerPacientesConDatosClinicos AS
  CURSOR c_pacientes IS
    SELECT p.Id_Paciente, p.NombrePaciente, p.Apellido1Paciente, p.Apellido2Paciente,
           dc.DescripcionDato
    FROM Pacientes p
    LEFT JOIN DatosClinicos dc ON p.Id_Paciente = dc.Id_Paciente;

  r_paciente c_pacientes%ROWTYPE;
BEGIN
  FOR r_paciente IN c_pacientes LOOP
    DBMS_OUTPUT.PUT_LINE('ID: ' || r_paciente.Id_Paciente ||
                         ' Nombre: ' || r_paciente.NombrePaciente ||
                         ' Apellido: ' || r_paciente.Apellido1Paciente ||
                         ' Dato Clínico: ' || r_paciente.DescripcionDato);
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: no se obtuvieron DatosClinicos ' || SQLERRM);
END ObtenerPacConDatosClin;
/



--Este procedimiento almacenado crea un cursor que une la tabla de pacientes con la de datos clínicos, devolviendo los datos de los pacientes y sus respectivos datos clínicos asociados.

--Cursor para obtener la lista de citas pendientes:

CREATE OR REPLACE PROCEDURE ObtenerCitasPendientes AS
  CURSOR c_citas IS
    SELECT c.Id_Citas, c.Fecha, c.Hora, c.Estado, p.NombrePaciente, d.NombreDoctor
    FROM Citas c
    JOIN Pacientes p ON c.Id_Paciente = p.Id_Paciente
    JOIN Doctores d ON c.Id_Doctores = d.Id_Doctores
    WHERE c.Estado = 'Pendiente';

  r_cita c_citas%ROWTYPE;
BEGIN
  OPEN c_citas;
  LOOP
    FETCH c_citas INTO r_cita;
    EXIT WHEN c_citas%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('Cita ID: ' || r_cita.Id_Citas ||
                         ' Fecha: ' || r_cita.Fecha ||
                         ' Hora: ' || r_cita.Hora ||
                         ' Estado: ' || r_cita.Estado ||
                         ' Paciente: ' || r_cita.NombrePaciente ||
                         ' Doctor: ' || r_cita.NombreDoctor);
  END LOOP;
  CLOSE c_citas;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: no se obtuvieron Citas pendientes ' || SQLERRM);
END;
/

SET SERVEROUTPUT ON;
BEGIN
     ObtenerCitasPendientes;
END;
/
--Este procedimiento almacenado crea un cursor que devuelve las citas pendientes junto con la información del paciente y del doctor asociados a cada cita.

--Cursor para obtener la lista de doctores y sus especialidades:

CREATE OR REPLACE PROCEDURE ObtenerCitasPendientes AS
  CURSOR c_citas IS
    SELECT c.Id_Citas, c.Fecha, c.Hora, c.Estado, p.NombrePaciente, d.NombreDoctor
    FROM Citas c
    JOIN Pacientes p ON c.Id_Paciente = p.Id_Paciente
    JOIN Doctores d ON c.Id_Doctores = d.Id_Doctores
    WHERE c.Estado = 'Pendiente';

  r_cita c_citas%ROWTYPE;
BEGIN
  OPEN c_citas;
  LOOP
    FETCH c_citas INTO r_cita;
    EXIT WHEN c_citas%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('Cita ID: ' || r_cita.Id_Citas ||
                         ' Fecha: ' || r_cita.Fecha ||
                         ' Hora: ' || r_cita.Hora ||
                         ' Estado: ' || r_cita.Estado ||
                         ' Paciente: ' || r_cita.NombrePaciente ||
                         ' Doctor: ' || r_cita.NombreDoctor);
  END LOOP;
  CLOSE c_citas;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: no se obtuvieron Citas pendientes ' || SQLERRM);
END;
/

SET SERVEROUTPUT ON;
BEGIN
     ObtenerCitasPendientes;
END;
/


---------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE ObtenerDoctoresConEspecialidades AS
  CURSOR c_doctores IS
    SELECT d.Id_Doctores, d.NombreDoctor, d.Apellido1Doctor, d.Apellido2Doctor, e.DescripcionEspecialidad
    FROM Doctores d
    JOIN Especialidades e ON d.Id_Especialidad = e.Id_Especialidad;

  r_doctor c_doctores%ROWTYPE;
BEGIN
  OPEN c_doctores;
  LOOP
    FETCH c_doctores INTO r_doctor;
    EXIT WHEN c_doctores%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('Doctor: ' || r_doctor.NombreDoctor || ' ' || r_doctor.Apellido1Doctor ||
                         ' Especialidad: ' || r_doctor.DescripcionEspecialidad);
  END LOOP;
  CLOSE c_doctores;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: No se obtuvieron los doctores o las especialidades ' || SQLERRM);
END;
/

SET SERVEROUTPUT ON;
BEGIN
     ObtenerDoctoresConEspecialidades ;
END;
/
